一、MySQL中文乱码问题

1、查看MySQL数据库编码
	(1)SHOW VARIABLES LIKE 'char%';

2、编码解释
	(1)character_set_client: MySQL使用该编码来解读客户端发送过来的数据，例如该编码为UTF8，那么客户端发送过来的数据不是UTF8，那么就会出现乱码

	(2)character_set_results: MySQL会把数据转换成该编码后，再发送给客户端，例如该编码为UTF8，那么客户端不使用UTF8来解读，那么就会出现乱码


3、控制台乱码问题
	(1)插入或修改时出现乱码：
		- 这时因为cmd下默认使用GBK，而character_set_client不是GBK的原因，我们只需让这两个编码相同即可。
		- 因为修改cmd的编码不方便，所以我们去设置character_set_client为GBK即可。

	(2)查询出的数据为乱码
		- 这是因为character_set_result不是GBK，而cmd默认使用GBK的原因，我们只需让两个编码相同即可。

		- 因为修改cmd的编码不方便，所以我们去设置character_set_result为GBK即可。

	(3)设置变量的语句:
		set character_set_client=gbk;
		set character_set_result=gbk;

		在my.ini中设置default-character-set=gbk即可


4、指定默认编码
	(1)在my.ini中设置character-set-server=utf8



二、MySQL备份与恢复

1、数据库导出SQL脚本(备份数据库内容，并不是备份数据库)
	(1)语法：mysqldump -u用户名 -p密码 数据库名>生成的脚本文件路径

	(2)例如：mysqldump -u用户名 -p密码 mydb1>/home/king/DataBase/mydb1.sql

	(3)注意：生成的脚本文件中不包含create database语句


2、执行SQL脚本
	(1)第一种方式：
		- mysql -u用户名 -p密码 数据库<脚本文件路径

		- 例如：
			-- 先删除mydb1库，再重新创建mydb1库
			-- mysql -uroot -p123 mydb1</home/king/DataBase/mydb1.sql

	(2)第二种方式：
		- 登录mysql

		- source SQL脚本路径

		- 例如:
			-- 先删除mydb1库，再重新创建mydb1库
			-- 切换到mydb1库
			-- source /home/king/DataBase/mydb1.sql


三、约束

约束是添加在列上的，用来约束列的


1、主键约束(唯一标识)
	(1)主键属性：
		- 非空
		- 唯一
		- 被引用

	(2)当表的某一列被指定为主键后，该列就不能为空，不能有重复值出现

	(3)创建表时候指定主键的两种方式
		1)CREATE TABLE stu {
			sid CHAR(6) PRIMARY KEY,
			sname VARCHAR(20),
			age INT,
			gender VARCHAR(10)
		};

		2)指定sid列为主键列，即为sid列添加主键约束
			CREATE TABLE stu {
				sid CHAR(6),
				sname VARCHAR(20),
				age INT,
				gender VARCHAR(10),			
				PRIMARY KEY(sid)
			};

	(3)修改表时指定主键：ALTER TABLE stu ADD PRIMARY KEY(sid);

	(4)删除主键：ALTER TABLE stu DROP PRIMARY KEY;


2、主键自增长
	(1)因为主键列的特性是：必须唯一、不能为空，所以我们通常会指定主键类为整型，然后设置其自动增长，这样可以保证在插入数据时主键列的唯一和非空特性。

	(2)创建表时主键自增长
		CREATE TABLE stu (
			sid INT PRIMARY KEY AUTO_INCREMENT,
			sname VARCHAR(20),
			age INT,
			gender VARCHAR(10)
		);


3、非空约束
	(1)因为某些列不能设置为NULL值，所以可以对列添加非空约束。

	(2)例:	
		CREATE TABLE stu (
			sid INT NOT NULL,
			sname VARCHAR(20) NOT NULL,
			age INT,
			gender VARCHAR(10)
		);


4、唯一约束
	(1)车库某些不能设置重复的值，所以可以对列添加唯一约束。

	(2)例如:
		CREATE TABLE stu(
			sid INT PRIMARY KEY AUTO_INCREMENT,
			sname VARCHAR(20) NOT NULL UNIQUE, 
			age INT,
			gender VARCHAR(10),
		);

	(3)对sname列设置了非空约束


5、概念模型

对象模型：可以双向关联，而且引用的是对象，而不是一个主键！

关系模型：只能多方引用一方，而且引用的只是主键，而不是一整行记录。

对象模型：在java中的domain!!!
关系模型：在数据库中就是表!!!

	(1)当我们要完成一个软件系统时，需要把系统的实体抽取出来，形成概念模型。

	(2)例如部门、员工都是系统中的实体。概念模型中的实体最终会称为Java中的类、数据库中表

	(3)一对多：例如每个员工都从属一个部门，一个部门有多个员工

	(4)1对1：夫妻

	(5)多对多：学生和老师

	(6)概念模型在Java中称为实体类(JavaBean)
	类就使用成员变量来完成关系，一般都是双向关联
	多对一双向中关联，即员工关联部门，部门也关联员工

	Class Employee {//多方关联的一方
		...
		private Department department;
	}
	class Department {//一方关联的多方
		...
		private List<Employee> employee;
	}

	class Husband {
		...
		private Wife wife;
	}

	class Wife {
		...
		private Husband husband;
	}

	class Student {
		...
		private List<Teacher> teachers;
	}
	class Teacher {
		...
		private List<Student> students;
	}


6、外键约束
	(1)外键要引用主键

	(2)外键可以重复

	(3)外键可以为空

	(4)一张表中可以有多个外键!

  	(5)语法：CONSTRAINT 约束名称 FOREIGN KEY(外键列名) REFERENCES 关联表(关联表的主键) 
	  创建表时指定外键约束
	  create talbe emp (
	    empno int primary key,
	    ...
	    deptno int,
	    CONSTRAINT fk_emp FOREIGN KEY(mgr) REFERENCES emp(empno)  
	  );

	(6)修改表时添加外键约束
	  ALERT TABLE emp
	  ADD CONSTRAINT fk_emp_deptno FOREIGN KEY(deptno) REFERENCES dept(deptno);

	(7)修改表时删除外键约束
	  ALTER TABLE emp
	  DROP FOREIGN KEY fk_emp_deptno;/*约束名称*/
	  

10、数据库一对一关系
	(1)在表中建立一对一关系比较特殊，需要让其中一张表的主键，即是主键又是外键。
	  create table husband(
	    hid int PRIMARY KEY,
	    ...
	  );
	  create table wife(
	    wid int PRIMARY KEY,
	    ...
	    ADD CONSTRAINT fk_wife_wid FOREIGN KEY(wid) REFERENCES husband(hid)
	  );

  (2)其中wife表的wid即是主键，又是相对husband表的外键！
  	husband.hid是主键，不能重复！
  	wife.wid是主键，不能重复，又是外键，必须来自husband.hid。
  	所以如果在wife表中有一条记录的wid为1，那么wife表中的其他记录的wid就不能再是1了，因为它是主键。
  	同时在husband.hid中必须存在1这个值，因为wid是外键。这就完成了一对一关系。

  *****从表的主键即是外键！


11、数据库多对多关系
  	(1)在表中建立多对多关系需要使用中间表，即需要三张表，在中间表中使用两个外键，分别引用其他两个表的主键。
	  create table student(
	    sid int PRIMARY KEY,
	    ...
	  );
	  create table teacher(
	    tid int PRIMARY KEY,
	    ...
	  );

	  create table stu_tea(
	    sid int,
	    tid int,
	    ADD CONSTRAINT fk_stu_tea_sid FOREIGN KEY(sid) REFERENCES student(sid),
	    ADD CONSTRAINT fk_stu_tea_tid FOREIGN KEY(tid) REFERENCES teacher(tid)
	  );

  	(2)这时在stu_tea这个中间表中的每条记录都是来说明student和teacher表的关系
  例如在stu_tea表中的记录：sid为1001，tid为2001，这说明编号为1001的学生有一个编号为2001的老师
	  sid    tid
	  101    201 /*编号为101的学生有一个编号为201的老师*/
	  101    202 /*编号为101的学生有一个编号为202的老师*/
	  101    203 /*编号为101的学生有一个编号为203的老师*/
	  102    201 /*编号为102的学生有一个编号为201的老师*/
	  102    204 /*编号为102的学生有一个编号为204的老师*/


12、多表查询
	(1)分类：
		合并结果查询
		连接查询
		子查询

	(2)合并结果查询
		- 要求被合并的表中，列的类型和列数相同
		- UNION, 去除重复行
		- UNION ALL，不去除重复行

		SELECT * FROM ab
		UNION ALL
		SELECT * FROM cd;

	(3)连接查询
		1)分类：
			- 内连接
			- 外链接
				- 左外连接
				- 右外连接
				- 全外连接
			- 自然连接

		2)内连接
			a. 方言：SELECT * FROM 表1 别名1,表2 别名2 WHERE 别名1.xx==别名2.xx
			b. 标准：SELECT * FROM 表1 别名1 INNER JOIN 表2 别名2 ON 别名1.xx==别名2.xx
			c. 自然：SELECT * FROM 表1 别名1 NATURAL JOIN 表2 别名2
			d.内连接查询出的所有记录都满足条件。


		3)外连接
			a.左外连接：SELECT * FROM 表1 别名1 LEFT OUTER JOIN 表2 别名2 ON 别名1.xxx = 别名2.xxx;
				- 左表记录无论是否满足条件都会查询出来，而右表只有满足条件才能查出来。左表不满足条件的记录，都记为NULL。

			b.左外自然连接：SELECT * FROM 表1 别名1 NATURAL LEFT OUTER JOIN 表2 别名2 ON 别名1.xxx = 别名2.xxx;

			c.右外连接：SELECT * FROM 表1 别名1 RIGHT OUTER JOIN 表2 别名2 ON 别名1.xxx = 别名2.xxx;
				- 右表记录无论是否满足条件都会查询出来，而左表只有满足条件才能查出来。
				右表不满足条件的记录，都记为NULL。

			d.右外自然连接：SELECT * FROM 表1 别名1 NATURAL RIGHT OUTER JOIN 表2 别名2 ON 别名1.xxx = 别名2.xxx;

			e.全外连接：可以使用UNION来完成全连接
				SELECT e.ename,e.sal, d.dname
				FROM emp e RIGHT OUTER JOIN dept d
				ON e.deptno=d.deptno
				UNION
				SELECT e.ename, e.sal,IFNULL(d.dname, '无部门') AS dname
				FROM emp e LEFT OUTER JOIN dept d
				ON e.deptno = d.deptno;


	(4)子查询：查询中的查询(查看select关键字的个数！)

		1)出现的位置：
			a. where后作为条件存在
			b. from后作为表存在(多行多列)

		2)条件
			a. 单行单列：SELECT * FROM 表1 别名1 WHERE 列1 [=、>、<、>=、<=、!=]  (SELECT 列 FROM 表2 别名2 WHERE 条件)
 
			b. 多行单列：SELECT * FROM 表1 别名1 WHERE 列1 [IN, ALL, ANY] (SELECT 列 FROM 表2 别名2 WHERE 条件)

			c. 单行多列：SELECT * FROM 表1 别名1 WHERE (列1, 列2) IN (SELECT 列1, 列2, FROM 表2 别名2 WHERE 条件)

			d. 多行多列：SELECT * FROM 表1 别名1, (SELECT ...) 别名2 WHERE 条件
