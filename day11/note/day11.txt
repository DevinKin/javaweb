1、JSP的作用
	(1)Servlet：
		- 缺点： 不适合设置html响应体，需要大量的response.getWriter().print("html")
		- 优点： 动态资源，可以编程。

	(2)html:
		- 缺点： html是静态页面，不能包含动态信息
		- 优点： 不用为输出html标签而发愁

	(3)jsp：
		- 优点，在原有html基础上添加java脚本，构成jsp页面

	(4)jsp和Servlet的分工
		jsp：
			- 作为请求发起页面，例如显示表单，超链接
			- 作为请求结束页面，例如显示数据
		Servlet:
			- 作为请求中处理数据的环节。

	(5)jsp的组成
		- jsp = html + java脚本 + jsp标签(指令)

		- jsp中无需创建即可使用的对象一共有9个，被称为9大内置对象，例如，request对象，out对象

		- 3种java脚本：
			<%...%>: java代码片段(常用)，用于定义0-N条java语句，方法里面放什么，就可以写什么

			<%=...%>： java表达式，用于输出(常用)，用于输出一条表达式(或变量)的结果，参数里面放什么，这里就可以写什么

			<%!...%>： 声明，用来创建类的成员变量和成员方法(基本不用)，类里面放什么，这里就可以写什么


2、jsp和servlet分工的案例
	(1)form.jsp
<form action="/AServlet" method="post">
    整数1：<input type="text" name="num1"/><br/>
    整数2：<input type="text" name="num2"/><br/>
    <input type="submit" value="提交"/>
</form>

	(2)AServlet
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //1.获取参数
        String s1 = request.getParameter("num1");
        String s2 = request.getParameter("num2");

        //2.把字符串转换成int类型
        int n1 = Integer.parseInt(s1);
        int n2 = Integer.parseInt(s2);

        //3.进行加法运算得到结果
        int sum = n1 + n2;

        //4.保存结果到request域中
        request.setAttribute("result", sum);

        //5.转发到result.jsp
        request.getRequestDispatcher("/jia/result.jsp").forward(request,response);
    }
	(3)result.jsp
<%
    Integer result = (Integer)request.getAttribute("result");
%>
<%=result %>


3、jsp原理
	(1)jsp其实是一种特殊的Servlet
		- 当jsp页面第一次被访问时，服务器会把jsp编译成java文件(这个java其实是一个servlet类)

		- 然后再把java编译成.class

		- 然后创建该类对象

		- 最后调用它的service()方法

		- 第二次请求同一jsp时，直接调用service()方法。

	(2)在tomcat的work目录下可以找到jsp对应.java源代码。
/usr/tomcat/apache-tomcat-7.0.84/work/Catalina/localhost/day11/org/apache/jsp


	(3)查看jsp对应java文件
		-java脚本
		-html


4、jsp注释
	(1)<%-- ... --%>：当服务器把jsp编译成java文件时已经忽略了注释部分！


5、Cookie简介
	(1)Http协议与Cookie了解
		- Cookie是HTTP协议制定的；先由服务器保存Cookie到浏览器，再下次浏览器请求服务器时就把上一次请求得到Cookie再归还给服务器

		- 由服务器创建保存到客户端浏览器的一个键值对(一键一值)；服务器保存Cookie的响应头，Set-Cookie:aaa=AAA Set-Cookie:bbb=BBB
			response.addHeader("Set-Cookie", "aaa=AAA")

		- 当浏览器请求服务器时，会把该服务器保存的Cookie随请求发送给服务器，浏览器归还Cookie:aaa=AAA; bbb=BBB

		- Http协议规定(保证不给浏览器太大压力):
			- 1个Cookie最大4KB
			- 1个服务器最多向同1个浏览器保存20个Cookie
			- 1个浏览器最多可以保存100个Cookie

		- 浏览器大战：因为浏览器竞争很激烈，所以很多浏览器都会在一定范围内违反HTTP规定

	(2)Cookie是不能跨浏览器的！


6、Cookie的用途
	(1)服务器使用Cookie来跟踪客户端状态

	(2)保存购物车(购物车的商品不能用request保存，因为它是一个用户向服务器发送的多个请求信息)

	(3)显示上次登录名(也是一个用户多个请求) 


7、javaweb中使用Cookie
	(1)原始方式：
		-使用response发送Set-Cook	ie响应头

		-使用request获取Cookie请求头

	(2)便捷方式
		-使用response.addCookie()方法向浏览器保存Cookie
		-使用request.getCookies()方法获取浏览器归还的Cookie

	(3)Cookie第一例：
		- 一个jsp保存cookie， a.jsp

<h1>保存Cookie</h1>
<%-- request,response,session,application,pageContext,config,out,page,exception --%>
<%
    Cookie cookie1 = new Cookie("aaa","AAA");
    response.addCookie(cookie1);

    Cookie cookie2 = new Cookie("bbb","BBB");
    response.addCookie(cookie2);
%>
		- 另一个jsp获取客户端浏览器归还的cookie b.jsp

<h1>获取Cookie</h1>
<%
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie c : cookies) {
            out.print(c.getName() + "=" + c.getValue() + "<br/>");
        }
    }
%>


8、Cookie的maxAge属性
	(1)Cookie不只有name和value两个属性

	(2)Cookie的maxAge：Cookie的最大生命，即Cookie可保存的最大时长，以秒为单位，例如：cookie.setMaxAge(60)表示这个Cookie会被浏览器保存到硬盘上
		- maxAge>0：浏览器会把COokie保存到客户机硬盘上，有效时长为maxAge的值决定
		- maxAge<0：Cookie只在浏览器内存中存在，当用户关闭浏览器时，浏览器进程结束，同时Cookie也就死亡了。
		- maxAge=0：浏览器会马上删除这个Cookie！

	(3)例：
    Cookie cookie1 = new Cookie("aaa","AAA");
    cookie1.setMaxAge(60*60);
    response.addCookie(cookie1);


9、Cookie的路径
	(1)Cookie的路径并不是设置这个COokie在客户端的保存路径！！！

	(2)Cookie的path由服务器创建Cookie时设置

	(3)当浏览器访问服务器某个路径时，需要归还哪些Cookie给服务器呢？这个由Cookie的path决定。用浏览器访问路径与Cookie路径一一对比，Cookie路径是否包含浏览器访问路径，看哪个Cookie会被带上。

	(4)Cookie的path默认值，当前访问路径的父路径，例如在访问/day11_1/jsps/a.jsp时，响应cookie的默认path为/day11_1/jsps

	(5)例如：
		- aCookie.path=/day11_1; bCookie.path=/day11_1/jsps/; cCookie.path=/day11_1/jsps
		- 访问/day11_1/index.jsp，归还，aCookie
		- 访问/day11_1/jsps/a.jsp，归还，aCookie、bCookie
		- 访问/day11_1/jsps/cookie/b.jsp,归还aCookie、bCookie、cCookie


10、Cookie的domain
	(1)domain用来指定Cookie的域名，当多个二级域中共享Cookie时才有用。

	(2)例如: www.baidu.com zhidao.baidu.com news.baidu.com tieba.baidu.com之间共享Cookie时可以使用domain

	(3)设置domain为: cookie.setDomain(.baidu.com);

	(4)设置path为: cookie.setPath("/");


11、HttpSession简介
	(1)HttpSession是由JavaWeb提供的，用来会话跟踪的类，session是服务端对象，保存在服务器端。

	(2)HttpSession是Servlet三大域对象之一(request,session,application(ServletContext))，所以它也有setAttribute()、getAttribute()、removeAttribute()

	(3)HttpSession底层依赖Cookie，或是URL重写


12、HttpSession的作用
	(1)会话范围：会话范围是某个用户从首次访问服务器开始，到该用户关闭浏览器结束！
		- 会话，一个用户对服务器多次连贯性请求！所谓连贯性请求，就是该用户多次请求中间没有关闭浏览器。

	(2)服务器会为每个客户端创建一个session对象，session就好比客户在服务器端的账户，它们被服务器保存到一个Map中，这个Map被称为session缓存。
		- Servlet中得到session对象，HttpSession session = request.getSession();
		- Jsp中得到session对象，session是jsp内置对象之下，不用创建就可以直接使用

	(3)session域的相关方法：
		- void setAttribute(String name, Object value);
		- Object getAttribute(String name);
		- void removeAttribute(String name);


13、案例1：演示session中会话的多次请求中共享数据
	(1)AServlet: 向session域中保存数据

	(2)BServlet: 向session域中获取数据

	(3)演示：
		- 第一个请求，访问AServlet
		- 第二个请求，访问BServlet


14、案例2：演示保存用户登录信息(精通)
	(1)login.jsp：提供登录表单，提交表单请求LoginServlet

	(2)LoginServlet：获取请求参数，教研用户是否登录成功
		- 失败：保存错误信息到request域，转发login.jsp(login.jsp显示request域的错误信息)
		- 成功，保存用户信息到session域，重定向到succ1.jsp页面，显示session域中的用户信息

	(3)succ1.jsp：从session域获取用户信息，如果不存在，显示"你还没有登录"，存在则显示用户信息

	(4)succ2.jsp：从session域获取用户信息，如果不存在，显示"你还没有登录"，存在则显示用户信息

	(5)只要用户没有关闭浏览器，session就一直存在，那么保存在session中的用户信息也就一起存在！那么用户访问succ1和succ2就会通过！


15、HttpSession原理
	(1)request.getSession()方法：
		- 获取Cookie中的JSESSIONID:
			-- 如果JSESSIONID不存在，创建session，把session保存起来，把新创建的JSESSIONID保存到Cookie中
			-- 如果JSESSIONID存在，通过JSESSIONID查找session对象，如果没有查找到，创建session，把session保存起来，把新创建的JSESSIONID保存到Cookie中
			-- 如果JSESSIONID存在，通过JSESSIONID查找到了session对象，那么就不会再创建对象了
			-- 返回session
		- 如果创建了新的session，浏览器会得到一个包含JSESSIONID的Cookie，这个Cookie的生命为-1，即只在浏览器内存中存在，如果不关闭浏览器，那么下次请求时，再次执行request.getSession()方法时，因为可以通过Cookie中的JSESSIONID找到session对象，所以与上一次请求是同一session对象。

	(2)服务器不会马上给你创建session，在第一次获取session时，才会创建！request.getSession();

	(3)jsp文件第一次访问的时候就有JSESSIONID，而Servlet使用request.getSession()即可获得JSESSIONID。

	(4)request.getSession(false);
		request.getSession();
		request.getSession(true);
		后两个方法相同，第一个方法，如果session缓存中(如果cookie不存在)，不存在session，那么返回null，而不会创建session对象。


16、HttpSession其他方法：
	(1)String getId(); 获取sessionId

	(2)int getMaxInactiveInterval(); 获取session可以的最大不活动时间(秒)，默认为30分钟，当session在30分钟内没有使用，那么Tomcat会在session池中移除这个session

	(3)void invalidate(); 让session失效！调用这个方法会被session失效，当session失效后，客户端再次请求，服务器会给客户端创建一个新的session，并在响应中给客户端新session的sessionId

	(4)boolean isNew()：查看session是否为新。当客户端第一次请求时，服务器为客户端创建session，但这时服务器还没有响应客户端，也就是还没有把sessionId响应给客户端时，这时session的状态为新。


17、web.xml中配置session的最大不活动时间(分钟)
	(1)代码:
		<session-config>
			<session-timeout>30</session-timeout>
		</session-config>


18、URL重写
	(1)session依赖Cookie，目的是让客户发出请求时归还sessionId，这样才能找到对应的session。

	(2)如果客户端禁用了Cookie，那么就无法得到sessionId，那么session也就无用了！

	(3)也可以使用URL重写来替代Cookie	
		- 让网站的所有超链接、表单都添加一个特殊的请求参数，即sessionId
		- 这样服务器就可以通过获取请求参数得到sessionId，从而得到session对象
		- 这样服务器可以通过获取请求参数得到sessionId，从而找打session对象。

	(4)response.encodeURL(String url)
		- 该方法会对url进行智能的重写：当请求中没有归还sessionId这个cookie，那么该方法会重写url，否则不重写！当然url必须是指向本站的url。


19、一次性图形验证码
	(1)编写VerifyCode，用来生成一次性图形验证码

	(2)编写VerfiyServlet:
		- 使用VerfiyCode来生成图形验证码
		- 把文本保存到session中
		- 把图片相应给客户

	(3)在login.jsp页面中
		- <img>元素请求VerfiyServlet，页面中显示图形验证码
		- 表单给出用户输入的验证码

	(3)在LoginServlet中
		- 获取用户输入的验证码，请求参数！
		- 获取session中保存的真正的验证码文本，这是在打开login.jsp时已经保存到session中的
		- 比较用户输入的验证码与session中真正的验证码打印