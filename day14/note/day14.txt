1、功能分析
	(1)注册

	(2)登录

2、JSP
	(1)login.jsp --> 登录表单

	(2)regist.jsp --> 注册表单

	(3)index.jsp --> 主页(只有登录成功才能看见)


3、Servlet
	(1)LoginServlet

	(2)registServlet


4、Service：
	(1)UserService --> 与用户相关的业务类


5、Dao
	(1)UserDao --> 与数据相关的数据类


6、Domain(beans、entry)
	(1)User(对应数据库，还要对应所有表单)
		username
		password
		verifyCode


7、数据库设计 
	(1)users.xml
		<users>
			<user username="xxx" password="xxx"/>
			<user username="xxx" password="xxx"/>
		</users>


8、项目步骤
	(1)创建空项目

	(2)导入包
		- CommonUtils
		- commons-beanutils.jar
		- commons-logging.jar
 		- dom4j
 		- 

	(3)建包
		cn.itcast.user.domain
			User
		cn.itcast.user.dao
			UserDao
		cn.itcast.user.service
			UserService
		cn.itcast.user.web.servlet
			LoginServlet
			RegistServlet

	(4)新建jsp文件
		login.jsp
		regist.jsp
		index.jsp

	(5)在~/javaweb中创建一个user.xml文件
		- 添加根元素
		- 保证文件为utf-8编码


6、注册功能：
	(1)regist.jsp
		- 第一步，完成regist.jsp的基本功能！ 

	(2)RegistServlet
		- 封装表单数据，封装到一个User对象中
		- 调用service的regist()方法
			- 如果这个方法没有出问题，输出注册成功
			- 如果这个方法抛出了异常，把错误信息保存到request域中，转发到regist.jsp中(显示错误信息)

	(3)UserService#regist()
		- 没有返回值，但注册类是被抛出一个自定义的异常！可以在异常中添加异常信息(自定义异常类)
		- 校验用户名是否被注册(通过用户名查询用户)，如果已被注册，抛出异常，异常信息为"用户名已经被注册"
		- 添加用户

	(4)UserDao：通过业务分析，得到结果，需要提供两个方法
		- 按用户名查询用户对象, User findByUsername(String username);
		- 插入一个用户到数据库中, void add(User user);


7、注册工作
	(1)在service层添加一个UserException

	(2)dao:
		User findByUsername(String username);
		void add(User user);

	(3)service
		void regist() throws UserException

	(4)servlet
	 	- 封装表单数据到User对象中
	 	- 使用user调用service的regist()方法
	 		- 如果得到UserException，那么把异常信息保存到request域中，转发到regist.jsp中
	 		- 输出"注册成功"



8、给注册添加验证码
	(1)VerifyCode类
		- BufferedImage getImage() --> 获取随机的验证码图片

		- String getText() --> 获取图片上的文本

		- static output(BufferedImage, OutputStream) --> 把图片写入到指定的输出流

	(2)VerifyCodeServlet
		- 获取随机验证码图片

		- 把验证码图片上的文本保存到session中

		- 把图片响应到response的outputStream中

	(3)regist.jsp
		- 添加<img src="指向Servlet"/>

		- 添加一个文本框，用来输入验证码

		- "看不清，换一张"，是一个超链接，把上面的<img>的src重新再次指向Servlet!为了处理浏览器的缓存，需要使用时间来做参数。


	(4)修改RegistServlet
		- 校验验证码！

		- 错误，保存表单数据到request域、保存错误信息到request域，转发回regist.jsp

		- 正确，什么都不做，向下执行原来的代码


9、服务器端表单(输入)校验
	(1)我们把这段校验，放到获取表单数据之后，校验码校验之前

	(2)使用map类型来装在错误信息！
		- key：表单项名称，例如：username、password、verifyCode

		- value: 消息
			- 非空：用户名、密码不能为空
			- 长度：用户名、密码长度必须到3～20之间

	(3)在校验失败时，向Map添加错误信息！哪个字段出错，就给哪个字段添加错误信息。

	(4)判断Map是否为空(长度是否为0)，如果不空，说明有错误存在，保存map到request域
	保存form到request域，转发回regist.jsp

	(5)在regist.jsp页面中，显示map中的错误信息。${map.username}


10、登录功能
	(1)页面login.jsp --> 登录表单!

	(2)LoginServlet -->
		- 获取表单数据封装到User中

		- 调用service的login()方法，传递form过去！

		- 如果service的login()方法没有抛出异常！返回一个User对象
			- 有异常：获取异常信息，保存到request域，保存form，转发到login.jsp

			- 没异常：保存返回的user对象到session中！！！转发到welcome.jsp(显示当前用户信息)

	(3)UserService#login()
		public User login(User form) {...} 
		1、使用用户名查询数据库，得到返回的User
			- 返回null，抛出异常，异常信息为(用户名不存在)

			- 返回不为null，获取查询出来的user的password与form的password进行比较！
				如果不同，抛出异常(密码错误！)
				如果相同，返回查询结果!

	(4)UserDao
		1.通过用户名查询用户!(已经存在了，不用再写了！)