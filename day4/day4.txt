1、案例1: 在末尾添加节点
	(1) 第一步: 获取到ul标签
	(2) 第二步: 创建li标签
		document.createElement("标签名称"); //方法
	(3) 第三步: 创建文本
		document.createTextNode("文本内容");
	(4) 第四步: 把文本添加到li下面
		document.appendChild("文本标签对象");
	(5) 第五步: 把li添加到ul的末尾
		document.appendChild("li标签对象");


2、element对象
	(1)要操作element对象，要获取element对象
		- 使用document里面相应的方法获取

	(2) 方法:
		- 获取属性里面的值:
			getAttribute("属性名称")

			alert(input1.getAttribute("class"));

		- 设置属性里面的值:
			setAttribute("属性名称", "值")
			
			input1.setAttribute("class", "gougou");


		- 删除属性:
			removeAttribute("属性名称")

			input1.removeAttribute("value");


3、 想要获取标签下面的子标签
	(1)使用属性: childNodes，但是这个属性的兼容性很差

	(2)获得标签下面子标签的唯一办法，使用getELementsByTagName方法

		// 获取到ul下面的所有子标签(子元素)
		// 获取ul标签
		var ul1 = document.getElementById("ulid");

		// 获取ul下面的子标签
		//var lis = ul1.childNodes;
		//alert(lis.length);
		var lis = ul1.getElementsByTagName("li");
		alert(lis.length);


4、Node对象的属性一
	(1) nodeName

	(2) nodeType

	(3) nodeValue

	(4) 标签节点对应的值:
		<span id = "spanid">哈哈蛤蛤蛤</span>
		alert(span1.nodeType);	// 1
		alert(span1.nodeName);	// SPAN
		alert(span1.nodeValue);	// null

	(4) 属性节点对应的值:
		var id1 = span1.getAttributeNode("id");
		alert(id1.nodeType);	// 2
		alert(id1.nodeName);	// id
		alert(id1.nodeValue);	// spanid

	(5) 文本节点对应的值:
		var text1 = span1.firstChild;
		alert(text1.nodeType);	// 3
		alert(text1.nodeName);	// #text
		alert(text1.nodeValue);	// 内容


5、Node对象的属性二
	(1)父节点: parentNode

	(2)子节点: 
		- childNodes: 得到所有子节点，但是兼容性很差
		- firstChild: 第一个子节点
		- lastChild: 最后一个子节点

	(3)同辈节点
		- nextSibling: 返回一个给定节点的下一个兄弟节点
		- previousSibling: 返回一个给定节点的上一个兄弟节点

	- 例：ul是li的父节点，li是ul的子节点,li之间是同辈节点
	<ul>
		<li>qqqqqqq</li>
		<li>wwwwwww</li>
	</ul>

		// 得到li1
		var li1 = document.getElementById("li1");
		// 得到ul
		var ul1 = li1.parentNode;
		alert(ul1.id);


5、操作dom树
	(1)appendChild方法
		- 添加子节点到末尾
		- 特点: 类似剪切粘贴的效果

	(2)insertBefore(newNode, oldNode)方法
		- 在某个节点之前插入一个新的节点
		- 两个参数
			-- 要插入的节点
			-- 在谁之前插入

		- 插入一个节点，节点不存在，创建一个节点
			-- 创建标签
			-- 创建文本
			-- 把文本添加到标签下面
		// 在<li>王昭君</li>之前插入<li>董小宛</li>
		function insert1() {
			/*
				1、获取li13标签
				2、创建li
				3、创建文本
				4、把文本添加到li下面
				5、获取到ul
				6、把li添加到ul下面
			 */
			// 1
			var li13 = document.getElementById("li13");
			//2
			var li15 = document.createElement("li");
			//3
			var text15 = document.createTextNode("董小宛");
			//4
			li15.appendChild(text15);
			//5
			var ul = document.getElementById("ulid");
			// 6
			ul.insertBefore(li15, li13);

	(3) removeChild(Node) 方法: 删除节点
		- 通过父节点删除，不能自己删除自己
		代码:
			var li14 = document.getElementById("li14");
			var ul1 = document.getElementById("ulid");
			ul1.removeChild(li14);

	(4) replaceChild(newNode, oldNode) 方法: 替换节点
		- 不能替换自己，通过父节点替换

		var ul31 = document.getElementById("ulid"); 
		var li32 = document.getElementById("li32");
		var nli32 = document.createElement("li");
		var text32 = document.createTextNode("隔壁老王");
		nli32.appendChild(text32);
		ul31.replaceChild(nli32, li32);

	(5) cloneNode(boolean): 复制节点

操作dom总结:
	(1)获取节点使用方法
		getElementById()
		getElementsByName()
		getElementsByTagName()

	(2)插入节点的方法
		insertBefore()
		appendChild()

	(3)删除节点
		removeChild()

	(4)替换节点
		replaceChild()

	(5)复制节点
		cloneNode()


6、innerHTML属性
	(1)该属性不是dom的组成部分，但是大多数浏览器都支持的属性

	(2)作用:
		- 获取文本的内容

		<span id="sid">蛤蛤蛤呵呵呵</span>
		var span1 = document.getElementById("sid");		
		alert(span1.innerHTML);

		- 向标签里面设置内容(可以是html代码)

		var div1 = document.getElementById("divid");
		div1.innerHTML = "<h1>AAAAAA</h1>";

	(3) 练习: 向div里面添加一个表格
		var tab="<table border='1'><tr><td>AAAaa</td></tr><tr><td>AAAaa</td></tr><tr><td>AAAaa</td></tr>";
		tab += "</table>";
		div1.innerHTML = tab;


7、案例二：动态显示时间
	(1)得到当前时间: Date对象

	(2)需要让页面每一秒获取时间

	(3)显示到页面上
		function getD1 () {
			var date = new Date();
			var dl = date.toLocaleString();

			var div1 = document.getElementById("times");
			div1.innerHTML = dl;
		}
		setInterval(getD1, 1000);


8、案例三：全选练习
	(1)创建页面
		- 复选框和按钮
			-- 四个复选框表示爱好
			-- 一个复选框操作全选全部选(有事件)

		- 三个按钮:分别有事件
			- 全选
			- 全部选
			- 反选


9、案例四：下拉列表左右选择
	(1)下拉选择框
	<select multiple="multiple">
		<option>111</option>
		<option>222</option>
		<option>333</option>
	</select>

	(2)创建一个页面
		- 两个下拉选择框
			-- 设置属性 multiple属性

		- 四个按钮，有事件

	(3)注意: options是获取对应select下的option
		每次添加option另一个select里面时，options长度减一


10、案例五: 省市联动
	(1)创建一个页面，有两个下拉选择框

	(2)在第一个下拉框里有一个时间，改变事件 onchange事件，绑定一个方法
		- change(this.value); 表示当前改变的option里面的value值

	(3)创建一个二维数组，保存数据

	(4)每次添加之前，判断city里面是否具有option，如果有，删除
		removeChild();
 

11、 案例六: 动态生成表格
	(1)创建一个页面，两个输入框和一个按钮
