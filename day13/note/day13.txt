1、JSTL的概述
	(1)JSTL是apache对EL表达式的扩展(JSTL依赖EL)，JSTL是标签语言！

	(2)使用jstl需要导入jstl1.2.jar


2、JSTL标签库
	JSTL一共包含四大标签库：
	(1)core: 核心标签库，我们学习的重点

	(2)fmt：格式化标签库，只需我们学习两个标签即可(日期，数字)

	(3)sql：数据库标签库，不需要学习了，过时

	(4)xml：xml标准库，不需要学习了，过时 


3、使用taglib指令导入标签库
	(1)导入jar包

	(2)导入JST的core标签库
		<%@ targlib prefix="c" uri="http://java.sun.com/jstl/core" %>


4、core标签库常用标签(c标签)
	(1)out
		- <c:out>：输出，下列属性
			- value：可以是字符串敞亮，也可以是EL表达式
			- default：当要输出的内容为null时，会输出default指定的值
			- escapeXml：默认值为true，表示转义

		-例子：
			<c:out value="aaa"/>		输出字符串aaa
			<c:out value=${aaa}/>		全域查找aaa，并输出之
			<c:out value="${code}" escapeXml="false"></c:out>

	(2)set
		- <c:set> 创建一个域的变量，默认域为page

		- 标签属性
			- var：创建变量的名字
			- value：创建变量的值
			- scope：创建变量所在域，page,request,session,application

		- 例：
<c:set var="code" value="<script>alert('Hello');</script>" scope="request"/>
<c:out value="${code}" escapeXml="false"/>

	(3)remove
		- <c:remove> 删除一个域的变量

		- 属性
			var：变量名
			scope: 如果不给出scope，表示删除所有域中的名称，如果指定了域，那么只删除该域的变量

	(4)url
		- <c:url> 

		- 属性
			value：指定一个路径！它会在路径前面自动添加项目名。
		- 例:
			<c:url value="/index.jsp">，它会输出/day13/index.jsp

			子标签:<c:param>，用来给url后面添加参数，可以对参数进行url编码
		- 例:
			<c:url value="index.jsp">
				<c:param name="username" value="张三"/>
			</c:url>
			结果为 /day13/index.jsp?username=%e5%bc%a0%e4%b8%89

			var：指定变量名，一旦添加这个属性，那么url标签就不会再输出到页面，而是把生成的url保存到域中。

			scope：它与var一起使用，用来保存url。
		-例：


	(5)if
		- 对应java中的if语句

		- 语法:
			<c:if test="boolean类型">..</c:if>	
		- 属性:
			test：必须放boolean类型的值，没有指定域，表示全域
		- 例：
			<c:set var="a" value="hello"/>
			<c:if test="${ not empty a}">
				<c:out value="${a}"/>
			</c:if>


	(6)choose
		- 对应java中的if/else if/ .. /else

		- 例：
			<c:set var="score" value="${param.score}"/>
			<c:choose>
				<c:when test="${scope > 100 || scope < 0}">错误分数:${score}</c:when>
				<c:when test="${scope >= 90}">A级</c:when>
				<c:when test="${scope >= 80}">B级</c:when>
				<c:when test="${scope >= 70}">C级</c:when>
				<c:when test="${scope >= 60}">D级</c:when>
				<c:otherwise>E级</c:otherwise>
			</c:choose>
			等同于：
			if (...) {
			} else if (...){
			} else if (...){
			} else if (...){
			} else if (...){
			} else if (...){
			} else {
			}

	(7)forEach
		- 它用来循环遍历数组、集合！

		- 它还可以用来计数方式来循环！

		- 计数方式:
			<c:forEach var = "i" begin="1" end="10" step="2">
				${i}
			</c:forEach>

		- 属性:
			var: 循环变量
			begin: 设置循环变量从几开始
			end: 设置循环变量从几结束
			step: 设置循环变量的步长
			items: 要遍循环谁，它可以是一个数组或一个集合

		- 集合循环
			<%
			    String[] strs = {"one", "two"};
			    request.setAttribute("strs", strs);
			%>

			<c:forEach items="${strs}" var="str">
			    ${str}<br/>
			</c:forEach>


5、fmt标签库
	(1)它是格式化库

	(2)<fmt:Formatdate value="${d}" pattern="yyyy-MM-dd HH:mm:ss"/>

	(3)例:
<%
    Date d = new Date();
    request.setAttribute("date", d);
%>

<fmt:formatDate value="${requestScope.date}" pattern="yyyy-MM-dd HH:mm:ss"/>

	(4)属性:
		value：指定一个Date类型的变量
		pattern：用来指定输出的模板！例如yyy-MM-dd HH:mm:ss


	(5)<fmt:formatNumber value="" pattern="">

	(6)例：
<%
    request.setAttribute("num1", 3.1415926);
%>
<fmt:formatNumber value="${requestScope.num1}" pattern="0.00"/>
	保留小数点后2位，它会四舍五入！如果不足2位小数，以0补位。
<fmt:formatNumber value="${requestScope.num1}" pattern="#.##"/>
	保留小数点后2位，它会四舍五入！如果不足2位小数，不以0补位。


6、自定义标签
	(1)步骤
		- 标签处理类(标签也是一个对象，那么就需要先有类!)
		该类需要使用一个包，在tomcat下的lib/jsp-api.jar包，导入该包即可
		实现SimpleTag接口或继承SimpleTagSupport

		- 写一个tld文件，它是一个xml
<?xml version="1.0" encoding="utf-8" ?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
        version="2.0">
    <tlib-version>1.0</tlib-version>
    <short-name>itcast</short-name>
    <uri>http://www.itcast.cn/tags/it-1.0</uri>

    <tag>
        <name>myTag1</name>	指定当前标签的名称
        <tag-class>cn.itcast.tag.MyTag1</tag-class> 指定当前标签的标签处理类
        <body-content>empty</body-content> 指定标签体的类型，我们这里使用的是空标签
    </tag>

</taglib>	

		- 页面中使用<%@taglib%>来指定tld文件的位置，就是为页面指定tld文件的位置
<%@ taglib prefix="it" uri="/WEB-INF/tlds/itcast-tag.tld"%>


7、标签处理类
	(1)SimpleTag接口：
		- void doTag(); 每次执行标签时都会调用这个方法
		- JspTag getParent(); 返回父标签(非生命周期方法)
		- void setParent(JspTag); 设置父标签
		- void setJspBody(JspFragmnet); 设置标签体
		- void setJspContext(JspContext); 设置jsp上下文对象，它儿子是PageContext

	(2)其中doTag()会在其他三个方法之后被tomcat调用


8、标签体内容
	(1)格式：
		- empty：无标签
		- JSP： jsp2.0已经不再支持这个类型了！表示标签里面内容可以是：java脚本、可以是标签，可以是EL表达式
		- scriptless：只能是EL表达式，也可以是其他的标签！
		- tagdependent：标签体内容不会被执行，而是直接赋给标签处理类！



9、不再执行标签下面内容的标签
	(1)在标签处理类中的doTag()中使用SkipPageException来结束！

		Tomcat会调用标签处理类的doTag()方法，然后Tomcat会得到SkipPageException，它会跳过本页的其他内容。

	(2)例:
    @Override
    public void doTag() throws JspException, IOException {
        this.getJspContext().getOut().print("你只能看到我,下面什么也没有");
        //抛出这个异常后,在本标签后面的内容,将看不到！
        throw new SkipPageException();
    }


10、属性的标签
	(1)步骤
		- 给标签处理类添加属性！
			为标签处理类添加属性，属性至少要且一个set方法，这个set方法会在doTag()方法之前被tomcat执行，所以doTag()中就可以使用属性了。

		- 在tld文件中对属性进行配置
	        <attribute>
	            <name>test</name>	指定属性名
	            <required>true</required> 指定属性是否为必需的
	            <rtexprvalue>true</rtexprvalue> 指定属性是否可以使用EL
	        </attribute>

	       	- rtexprvalue: runtime expression value，运行时表达式值


11、MVC设计模式
	(1)它不是java独有，所有的B/S结构的项目都在使用它

	(2)M -- model(模型)(自己写代码)
		V -- view(视图)(jsp)
		C -- Controler(控制器)(Servlet)


12、JavaWeb三层架构
	(1)三层架构是由JavaWeb提出的

	(2)三层架构为：
		- Web层 -->与Web相关的内容(Servlet,JSP, Servlet相关的API：request、response、session、ServletContext)
		- 业务层	-->业务对象(Service)
		- 数据层 -->操作数据(DAO Data Access Object)所有对数据库的操作，不能跳出到DAO之外。

